import Head from 'next/head'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { Chart, Line } from 'react-chartjs-2'
import { SegmentedControl, NativeSelect, TextInput, Slider, Space, Text, Divider, Drawer, Button, Radio } from '@mantine/core'
import { GoSettings } from 'react-icons/go'
import {calcProjectedNets} from '../finance-planner'

// https://codesandbox.io/s/github/reactchartjs/react-chartjs-2/tree/master/sandboxes/line/default?from-embed=&file=/App.tsx

import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js'

ChartJS.register(CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Filler
)

const lineChartOptions = {
  responsive: true,
  plugins: {
    legend: {
      // https://stackoverflow.com/a/38212833/17712310
      display: false,
      position: 'top'
    },
    title: {
      display: false
    },
  },
  // https://github.com/reactchartjs/react-chartjs-2/issues/61#issuecomment-633633803
  maintainAspectRatio: false,
  layout: {
    padding: 0
  },
  elements: {
    point: {
      pointStyle: 'circle',
      radius: 3,
      backgroundColor: "#fff",
      borderColor: "#fff"
    },

    line: {
      tension: 0,
      borderWidth: 3
    }
  },

  scales: {
    x: {
        ticks: {
        padding: 10
      }
    },
    y: {
      ticks: {
      padding: 10
    }
  }
  }
}



const salaryDefault = 54000
const minSalaryChange = -10
const maxSalaryChange = 100
const mainWrapperWidth = 450


export default function Home() {

  const [incomeType, setIncomeType] = useState('hourly')
  const [expectedIncomeChange, setExpectedIncomeChange] = useState(3)
  const [graphConfigDrawerOpen, setGraphConfigDrawerOpen] = useState(false)
  const [numMonthsProjected, setNumMonthsProjected] = useState(50)
  const [numYearsProjected, setNumYearsProjected] = useState(1)
  const [graphIntervalTimeFrame, setGraphIntervalTimeFrame] = useState('months')
  const [salary, setSalary] = useState(salaryDefault.toString())
  const [currNetWorth, setCurrNetWorth] = useState(0)

  // https://ui.mantine.dev/category/inputs#currency-input
  const incomeCurrencySelector = (
    <NativeSelect
      data={[
        {value: 'usd', label: '($) USD'}
      ]}
      styles={{
        input: {
          fontWeight: 500,
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0
        }
      }}
    />
  )

  const getData = () => {

    // https://dev.to/sanchithasr/7-ways-to-convert-a-string-to-number-in-javascript-4l
    const expectedNets = calcProjectedNets(parseInt(currNetWorth), parseInt(salary), expectedIncomeChange / 100, numMonthsProjected, graphIntervalTimeFrame)

    // console.log(expectedNets)

    return {
      // https://stackoverflow.com/a/1643468/17712310
      // https://stackoverflow.com/a/18648314/17712310
      // https://www.freecodecamp.org/news/how-to-format-dates-in-javascript/#:~:text=You%20can%20also%20decide%20not%20to%20use%20either
      labels: expectedNets.map(net => new Date(net.date).toLocaleDateString()),
      datasets: [
        {
          label: 'Red',
          data: expectedNets.map(net => net.expected),
          borderColor: '#32a86f',
          // https://codesandbox.io/s/github/reactchartjs/react-chartjs-2/tree/master/sandboxes/line/area?from-embed=&file=/App.tsx
          fill: true,
          // https://www.digitalocean.com/community/tutorials/css-hex-code-colors-alpha-values
          backgroundColor: '#32a86f14'
        }
      ]
    }
  }

  const [data, setData] = useState()



  useEffect(() => {
    setData(getData())
  }, [])


  // https://bobbyhadz.com/blog/react-listen-to-state-change#:~:text=Use%20the%20useEffect%20hook%20to,time%20the%20state%20variables%20change.
  useEffect(() => {
    onDataChange()
  }, [expectedIncomeChange, numMonthsProjected, numYearsProjected, graphIntervalTimeFrame])


  const onDataChange = () => {
    setData(getData())
  }
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <Button style={{position: 'absolute', top: 25, right: 25}} variant="transparent" size="xl" color="gray"
        // https://stackoverflow.com/a/59304431/17712310
        onClick={() => setGraphConfigDrawerOpen(!graphConfigDrawerOpen)}
      >
        <GoSettings/>
      </Button>


      <Drawer
        opened={graphConfigDrawerOpen}
        onClose={() => setGraphConfigDrawerOpen(false)}
        title={
          <Text size="lg" weight="bold">Graph Configuration</Text>
        }
        position="right"
        transitionDuration={225}
        padding={25}
        overlayBlur={0}
        overlayOpacity={.5}
      >
        <Divider size="xs" style={{marginBottom: 40}}/>

        {/* https://mantine.dev/core/checkbox/#controlled-checkboxgroup */}
        <Radio.Group
          value={graphIntervalTimeFrame}
          onChange={setGraphIntervalTimeFrame}
          sx={{
            marginBottom: 10
          }}
          size="sm"
        >
          <Radio value="months" label="months" styles={{radio: {cursor: 'pointer'}}} transitionDuration={250}/>
          <Radio value="years" label="years" styles={{radio: {cursor: 'pointer'}}} transitionDuration={250}/>
        </Radio.Group>

        {/* https://mantine.dev/core/slider/ */}
        <Text size="sm" weight={500} style={{marginBottom: 10}}>Months in the future</Text>
        <Slider
          value={numMonthsProjected}
          onChange={(newNum) => {
            setNumMonthsProjected(newNum)
            setNumYearsProjected(newNum / 12)
          }}
          marks={[
            {value: 0, label: '0'},
            {value: 100, label: '100'}
          ]}
          min={0}
          max={100}
          sx={{
            marginBottom: 35
          }}
        />

        <Text size="sm" weight={500} style={{marginBottom: 10}}>Years in the future</Text>
        <Slider
          value={numYearsProjected}
          onChange={(newNum) => {
            setNumYearsProjected(newNum)
            setNumMonthsProjected(newNum * 12)
          }}
          marks={[
            {value: 0, label: '0'},
            {value: 75, label: '75'}
          ]}
          min={0}
          max={75}
          sx={{
            marginBottom: 35
          }}
        />
      </Drawer>



      {/* https://youtu.be/Ge6PQkpa6pA */}
      <div className={styles.mainWrapper} style={{
        width: `${mainWrapperWidth}px`,
        // https://stackoverflow.com/a/30587944/17712310
        marginLeft: graphConfigDrawerOpen ? '5%' : `calc(50% - ${mainWrapperWidth/2}px)`,
        marginRight: 'auto'
      }}>

        {
          data && 

          <div className={styles.graphWrapper}>
            <Line data={data} options={lineChartOptions}/>
          </div>
        }

        <div className="chartParamsInputForm">
          <Text size="xl" weight="bold" style={{marginBottom: 10, color: "#86ad9b"}}>Income</Text>
          <Divider size="sm" style={{marginBottom: 25}}/>

          {/* https://mantine.dev/core/segmented-control/ */}
          <SegmentedControl
            value={incomeType}
            onChange={setIncomeType}
            data={[
              {label: 'Hourly', 'value': 'hourly'},
              {label: 'Salary', 'value': 'salary'}
            ]}
            sx={{
              marginBottom: 10
            }}
          />

          <TextInput
              type='number'
              value={currNetWorth}
              label='Current net worth'
              onChange={(event) => setCurrNetWorth(event.currentTarget.value)}
              sx={{
                width: '30%'
              }}
              styles={{ label: {marginBottom: 10}}}
              style={{
                marginBottom: 25
              }}
              onBlur={() => {
                onDataChange()
              }}
            />

          {
            incomeType == 'hourly' ?
            
            <div className="hourlyForm">
              hourly
            </div>

            :

            <div className="salaryForm">

              {/* https://ui.mantine.dev/category/inputs#currency-input */}
              {/* https://mantine.dev/core/text-input/#controlled */}
              <TextInput
                type='number'
                value={salary}
                label='Current Salary'
                onChange={(event) => setSalary(event.currentTarget.value)}
                rightSection={incomeCurrencySelector}
                rightSectionWidth={92}
                sx={{
                  width: '60%'
                }}
                styles={{ label: {marginBottom: 10}}}
                onBlur={() => {
                  onDataChange()
                }}
              />
              
              <Space h="xl"/>
              
              <Text size="sm" weight={500} style={{marginBottom: 10}}>Expected Average Annual Salary Change</Text>
              {/* https://mantine.dev/core/slider/ */}
              <Slider
                value={expectedIncomeChange}
                onChange={setExpectedIncomeChange}
                styles={{
                  track: {
                    bar: "#fff"
                  }
                }}
                sx={{
                  marginBottom: 50
                }}
                min={-10}
                max={maxSalaryChange}
                marks={[
                  {value: minSalaryChange, label: `${minSalaryChange.toString()}%`},
                  {value: 0, label: '0%'},
                  {value: maxSalaryChange, label: `${maxSalaryChange.toString()}%`}
                ]}
                label={value => `${value}%`}
              />
            </div>
          }

          <Text size="xl" weight="bold" style={{marginBottom: 10, color: "#b08991"}}>Expenses</Text>
          <Divider size="sm" style={{marginBottom: 25}}/>
        </div>
      </div>
    </div>
  )
}
