import Head from 'next/head'
import { useEffect, useState, useRef, useCallback } from 'react'
import styles from '../styles/page-styles/home.module.scss'
import { Button } from '@mantine/core'
import { useHotkeys } from '@mantine/hooks'
import { GoSettings } from 'react-icons/go'
import { IoMdClose } from 'react-icons/io'
import IncomeForm from '../components/income-form'
import SalaryIncomeForm from '../components/income-type-forms/salary-income-form'
import HourlyIncomeForm from '../components/income-type-forms/hourly-income-form'
import GraphConfigDrawer from '../components/graph-configuration-drawer'
import ExpenseForm from '../components/expense-form'
import Link from 'next/link'
import MainGraph from '../components/main-graph'

import useForesightState from '../data/foresight-graph-manager'


const minSalaryChange = -10
const maxSalaryChange = 100


export default function Home() {


  const state = useForesightState()



  /**
   * 
   * STATE OF UI
   * 
   */

  const [graphConfigDrawerOpen, setGraphConfigDrawerOpen] = useState(false)
  const [showingDisclaimerCard, showingDisclaimerCardSetter] = useState(true)
  const [hoveringDisclaimerCloseBtn, hoveringDisclaimerCloseBtnSetter] = useState(false)




  /**
   * Use Mantines useHotkeys hook to enable hotkey for toggling the configuration drawer
   */

  // https://mantine.dev/hooks/use-hotkeys/
  useHotkeys([
    ['ctrl+shift+c', () => setGraphConfigDrawerOpen(!graphConfigDrawerOpen)]
  ])






  // when income configurations change -> recalculate the income forecast
  useEffect(() => {
    state.updateDates()
    state.updateIncomeDatapoints()
  }, [
    state.config.income.salary,
    state.config.income.incomeType,
    state.config.income.netWorth,
    state.config.income.expectedSalaryChangePerYear
  ])


  // when expense configurations change -> recalculate the expense forecast
  useEffect(() => {
    state.updateDates()
    state.updateExpenseDatapoints()
  }, [
    state.config.expenses.expensesPerPeriod,
    state.config.expenses.intervalLength
  ])


  // when loan configurations change -> recalculate the loan forecast
  useEffect(() => {
    state.updateDates()
    state.updateLoanDatapoints()
  }, [
    state.config.loan.interestRate,
    state.config.loan.loanAmount,
    state.config.loan.period,
    state.config.loan.useRelativeDownPayment,
    state.config.loan.absoluteDownPayment,
    state.config.loan.relativeDownPayment,
    state.incomeForecastDatapoints,
    state.expenseForecastDatapoints
  ])


  useEffect(() => {
    state.updateDates()
    state.updateIncomeDatapoints()
    state.updateExpenseDatapoints()
    state.updateLoanDatapoints()
  }, [
    state.config.graph.intervalLength,
    state.config.graph.numMonthsInFutureToProject
  ])









  
  return (
    <div className={styles.container}>
      <Head>
        <title>Loan Foresight</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* button to open the graph configuration drawer */}
      <Button style={{position: 'absolute', top: 25, right: 25, zIndex: 99}} variant="transparent" size="xl" color="gray"
        // https://stackoverflow.com/a/59304431/17712310
        onClick={() => setGraphConfigDrawerOpen(!graphConfigDrawerOpen)}
      >
        <GoSettings/>
      </Button>

      {/* graph configuration drawer */}
      <GraphConfigDrawer
        isOpen={graphConfigDrawerOpen}
        isOpenSetter={setGraphConfigDrawerOpen}
      />



      {/* https://youtu.be/Ge6PQkpa6pA */}
      <div className={`${styles.mainWrapper} ${graphConfigDrawerOpen ? styles.mainWrapperConfigOpen : ''}`}>

        {/* disclaimer */}
        {
          showingDisclaimerCard && <div id={`${styles['disclaimer-card']}`}>
            <div id={`${styles['disclaimer-top']}`}>
              <h4 style={{fontWeight: 'bold', margin: 0}}>Disclaimer</h4>
              <IoMdClose
                style={{marginLeft: 'auto', cursor: 'pointer'}}
                color={hoveringDisclaimerCloseBtn ? '#f50a1e' : '#a3222d'}
                onMouseEnter={() => hoveringDisclaimerCloseBtnSetter(true)}
                onMouseLeave={() => hoveringDisclaimerCloseBtnSetter(false)}
                onClick={() => showingDisclaimerCardSetter(false)}
              />
            </div>
            <p style={{margin: 0, marginTop: 10}}>Nothing here is garunteed to be accurate. Use at your own risk.</p>
          </div>
        }

        <div className="graphInsights"
          style={{
            marginBottom: 25
          }}
        >
          {/* average amount of money saved based on conditions */}
          {/* {
            avgSavedPerTimeInterval &&

            // https://stackoverflow.com/a/16233919
            <Text>Avg saved per {graphIntervalTimeFrame == 'months' ? 'month' : 'year'} : {Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'}).format(avgSavedPerTimeInterval)}</Text>
          } */}
        </div>

        <div className={styles.graphWrapper}>
          <MainGraph/>
        </div>

        <div className="chartParamsInputForm">

          {/* https://blog.logrocket.com/solving-prop-drilling-react-apps/ */}
          <IncomeForm
            salaryForm={<SalaryIncomeForm
              minSalaryChange={minSalaryChange}
              maxSalaryChange={maxSalaryChange}
            />}
            hourlyForm={<HourlyIncomeForm/>}
          />

          {/* https://stackoverflow.com/a/51148917 */}
          <ExpenseForm/>
        </div>

        <div id="footer" style={{
          padding: '25px 0',
          display: 'flex',
          columnGap: '5px'
        }}>
          {/* https://nextjs.org/docs/api-reference/next/link#if-the-child-is-a-tag */}
          <Link id="releases-link" href="/releases" legacyBehavior>
            Releases
          </Link>
        </div>
      </div>
    </div>
  )
}
